name: Deploy to Staging

on:
  workflow_dispatch:
    inputs:
      deploy_password:
        description: 'Enter deployment password'
        required: true
        type: string
      deploy_branch:
        description: 'Enter branch name to deploy'
        required: true
        type: string
        
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-password-check:
    runs-on: ubuntu-latest
    steps:
      - name: Verify deployment password
        id: password-check
        continue-on-error: true
        run: |
          CORRECT_PASSWORD="${{ secrets.DEPLOY_PASSWORD }}"
          INPUT_PASSWORD="${{ github.event.inputs.deploy_password }}"
          
          if [[ "$INPUT_PASSWORD" != "$CORRECT_PASSWORD" ]]; then
            echo "::error::Invalid deployment password"
            exit 1
          fi
          echo "Password verified successfully"

      - name: Send unauthorized attempt alert
        if: steps.password-check.outcome == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Deployment Security Alert 🚨
          mention: channel
          if_mention: always
          job_name: security-check
          channel: examxv2-frontend-alerts
          username: ExamX-V2-CICD
          text: |
            🚨 *Unauthorized Deployment Attempt* 
            *User:* `${{ github.actor }}`
            *Workflow:* Deploy to Staging
            *Status:* Failed - Invalid Password
            
            This incident has been logged for security monitoring.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Block deployment on invalid password
        if: steps.password-check.outcome == 'failure'
        run: |
          echo "::error::Authentication failed - Deployment blocked"
          exit 1

  build-frontend-staging-image:
    needs: security-password-check 
    runs-on: ubuntu-latest
    environment: stg
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.deploy_branch }}
          repository: 'Greatify/ExamX-V2-Frontend'
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          unprotect_reviews: true

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch environment secrets from AWS
        id: fetch-secrets
        run: |
          aws secretsmanager get-secret-value \
            --secret-id examxv2-frontend-stg \
            --query SecretString \
            --output text > .env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: |
            --debug
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
          config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
            [worker.oci]
              max-parallelism = 12

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate staging image tag
        id: generate-tag
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          COMMIT_ID=$(git rev-parse HEAD)
          # Extract commit message and make it safe for use in tags
          COMMIT_MSG=$(git log -1 --pretty=%B | tr -d '\n' | cut -c1-50)
          SAFE_COMMIT_MSG=$(echo "$COMMIT_MSG" | sed -e 's/[^a-zA-Z0-9]/_/g' | cut -c1-30)
          IMAGE_TAG="stg-${SAFE_COMMIT_MSG}-${TIMESTAMP}-${COMMIT_ID:0:7}"
          
          printf 'IMAGE_TAG=%s\n' "$IMAGE_TAG" >> $GITHUB_OUTPUT
          printf 'REPO_COMMIT_SHA=%s\n' "$COMMIT_ID" >> $GITHUB_OUTPUT
          printf 'COMMIT_MESSAGE=%s\n' "$COMMIT_MSG" >> $GITHUB_OUTPUT
          printf 'Generated Image Tag: %s\n' "$IMAGE_TAG"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-stg-${{ env.REPO_COMMIT_SHA }}
          restore-keys: |
            ${{ runner.os }}-buildx-stg-
            ${{ runner.os }}-buildx-
  
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/examxv2-frontend:${{ steps.generate-tag.outputs.IMAGE_TAG }}
          platforms: linux/amd64
          build-args: 
            ENV_FILE=.env
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          no-cache: false
          pull: true
          labels: |
            org.opencontainers.image.revision=${{ env.REPO_COMMIT_SHA }}
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
  
      - name: Move cache directory
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save image tag and commit info to files
        run: |
          printf '%s\n' "${{ steps.login-ecr.outputs.registry }}/examxv2-frontend:${{ steps.generate-tag.outputs.IMAGE_TAG }}" > frontend_image_tag.txt
          printf '%s\n' "${{ steps.generate-tag.outputs.COMMIT_MESSAGE }}" > commit_message.txt
          printf '%s\n' "${{ steps.generate-tag.outputs.REPO_COMMIT_SHA }}" > commit_sha.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            frontend_image_tag.txt
            commit_message.txt
            commit_sha.txt
          if-no-files-found: error

      - name: Cleanup environment files
        run: rm -f .env

      - name: Send Docker build failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Docker Build Failure 🐳
          mention: ${{ github.actor }}
          if_mention: always
          job_name: build-frontend-staging-image
          channel: examxv2-frontend-alerts
          username: ExamX-V2-CICD
          text: |
            ❌ *Docker build failed* 🐳
            *Pusher:* `${{ github.actor }}`
            Please fix the Docker build issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-frontend-staging:
    runs-on: ubuntu-latest
    needs: [build-frontend-staging-image]
    environment: stg
    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          repository: 'Greatify/ExamX-V2-Frontend-Deployment'
          ref: 'main'
          fetch-depth: 0
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Set deployment variables from artifacts
        run: |
          printf 'FRONTEND_IMAGE=%s\n' "$(cat frontend_image_tag.txt)" >> $GITHUB_ENV
          printf 'COMMIT_MESSAGE=%s\n' "$(cat commit_message.txt)" >> $GITHUB_ENV
          printf 'COMMIT_SHA=%s\n' "$(cat commit_sha.txt)" >> $GITHUB_ENV

      - name: Update deployment image tag in Kustomization
        run: |
          # Update the image tag in the deployment patch
          sed -i 's|image: "[^"]*"|image: "'"$FRONTEND_IMAGE"'"|' k8s/overlays/stg/kustomization.yaml
          
      - name: Commit and push changes
        run: |
          git config --local user.email "hariharen@greatify.ai"
          git config --local user.name "Hariharen"
          git add k8s/overlays/stg/kustomization.yaml
          git commit -m "Update image tags for stg deployment - ${COMMIT_MESSAGE}"
          git push origin main

      # - name: Push to protected branch
      #   uses: CasperWA/push-protected@v2
      #   with:
      #     token: ${{ secrets.PAT_TOKEN }}
      #     branch: ${{ github.ref_name }}
      #     unprotect_reviews: true

      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: aws eks update-kubeconfig --name dev-stg-cluster --region ap-south-1

      - name: Deploy to staging environment
        run: |
          kubectl apply -k k8s/overlays/stg

      - name: Send deployment success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Frontend Deployment Success
          mention: channel
          if_mention: success
          job_name: deploy-frontend-staging
          channel: examxv2-frontend-alerts
          username: ExamX-V2-CICD
          text: |
            :rocket: *Frontend deployment to stg environment succeeded*         
            
            *Deployment by:* @${{ github.actor }}   
            *Commit:* `${{ env.COMMIT_SHA }}`
            *Commit Message:* `${{ env.COMMIT_MESSAGE }}`   
            
            @${{ github.actor }}, your changes have been deployed successfully to Staging.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
