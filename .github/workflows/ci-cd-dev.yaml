name: Deploy to Development

on:
  workflow_dispatch:
        
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs: 
  build-frontend-dev-image:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'Greatify/ExamX-V2-Frontend'
          fetch-depth: 0
          ref: ${{ github.ref_name }}
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Moved the secrets fetch before npm install
      - name: Fetch secrets from AWS Secrets Manager
        id: fetch-secrets
        run: |
          aws secretsmanager get-secret-value \
            --secret-id examx-frontend-dev \
            --query SecretString \
            --output text > .env
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: |
            --debug
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
          config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
            [worker.oci]
              max-parallelism = 12

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Generate staging image tag
        id: generate-tag
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          COMMIT_ID=$(git rev-parse HEAD)
          IMAGE_TAG="dev-${TIMESTAMP}-${COMMIT_ID}"
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated Image Tag: $IMAGE_TAG"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
  
      - name: Build and push Frontend Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/examxv2-frontend:${{ steps.generate-tag.outputs.IMAGE_TAG }}
          platforms: linux/amd64
          build-args: 
            ENV_FILE=.env
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
  
      - name: Move new cache to cache directory
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save image tag to file
        run: |
          echo "${{ steps.login-ecr.outputs.registry }}/examxv2-frontend:${{ steps.generate-tag.outputs.IMAGE_TAG }}" > frontend_image_tag.txt

      - name: Upload frontend image tag file
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image-tag
          path: frontend_image_tag.txt
          if-no-files-found: error

      # Step 12: Clean up .env file
      - name: Cleanup .env File
        run: rm -f .env

      - name: Slack Notification on Docker Build Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,eventName,ref,workflow
          author_name: Docker Build Failure 🐳
          mention: ${{ github.actor }}
          if_mention: always
          job_name: docker-build
          channel: examxv2-frontend-alerts
          username: ExamX-V2-CICD
          text: |
            ❌ *Docker build failed* 🐳
            *Pusher:* `${{ github.actor }}`
            Please fix the Docker build issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-frontend-dev-image]
    environment: dev
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'Greatify/ExamX-V2-Frontend-Deployment'
          ref: 'main'
          fetch-depth: 0

      - name: Download image tag files
        uses: actions/download-artifact@v4
        with:
          name: frontend-image-tag
          path: .

      - name: Set image tags as environment variables
        run: |
          echo "FRONTEND_IMAGE=$(cat frontend_image_tag.txt)" >> $GITHUB_ENV

      - name: Update Frontend React deployment image tag
        run: |
          # Update the image tag in the deployment patch
          sed -i 's|image: "[^"]*"|image: "'"$FRONTEND_IMAGE"'"|' k8s/overlays/dev/kustomization.yaml

      - name: Commit changes
        run: |
          git config --local user.email "hariharen@greatify.ai"
          git config --local user.name "Hariharen"
          git add k8s/overlays/dev/kustomization.yaml
          git commit -m "Update image tags for dev deployment"
          git push origin main

      # - name: Push to protected branch
      #   uses: CasperWA/push-protected@v2
      #   with:
      #     token: ${{ secrets.PAT_TOKEN }}
      #     branch: dev
      #     unprotect_reviews: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name dev-stg-cluster --region ap-south-1

      - name: Apply Kubernetes configuration to Dev
        run: |
          kubectl apply -k k8s/overlays/dev

      - name: Slack Notification on Successful Deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,eventName,ref,workflow
          author_name: Frontend Deployment Success
          mention: ${{ github.actor }}
          if_mention: success
          job_name: deploy-dev
          channel: examxv2-frontend-alerts
          username: ExamX-V2-CICD
          text: |
            :rocket: *Frontend deployment to dev environment succeeded*
            *Pusher:* `${{ github.actor }}`
            @${{ github.actor }}, your changes have been deployed successfully. Please verify the deployment in the dev environment.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
